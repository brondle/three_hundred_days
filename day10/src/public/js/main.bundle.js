/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/app.js":(e,t,s)=>{"use strict";s.r(t);var o=s("./src/js/data/config.js"),r=s("./src/js/utils/detector.js"),n=s("./src/js/app/main.js");s("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),o.default.isDev=!0,function(){if(r.default.webgl){document.getElementById("appContainer");(new n.default).render(20,0)}else r.default.addGetWebGLMessage()}()},"./src/js/app/main.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>m});var o=s("./node_modules/three/build/three.module.js"),r=s("./src/js/components/camera.js"),n=s("./src/js/components/lights.js"),i=s("./src/js/components/renderer.js"),a=s("./src/js/components/fog.js"),c=s("./src/js/components/controls.js"),l=s("./src/js/components/Train/Train.js"),d=s("./src/js/components/particleSystem.js");const h=new o.Clock;class m{constructor(){this.camera=(0,r.createCamera)(),this.camera.lookAt(new o.Vector3(5e3,200,2e4)),this.renderer=(0,i.createRenderer)(),this.scene=new o.Scene;const e=16777215;this.light=(0,n.createLights)(e,4),this.scene.add(this.light.target),this.scene.add(this.light,new o.AmbientLight(e,1.5));let t=new o.Color(16735775);this.scene.background=t,this.scene.fog=(0,a.createFog)(16771661,15,20),(0,c.createControls)(this.camera,this.renderer,this.light);const s=new l.Train;this.train=s,this.scene.add(s);const h=this.train.meshes.chimney.children[0],m=this.train.meshes.chimney;let u=new o.Vector3(-2*h.geometry.parameters.radiusBottom,h.geometry.parameters.height+4,-2*h.geometry.parameters.radiusBottom);u.add(m.position);let p=m.position.clone();p.setComponent(1,p.y+.5),console.log("min: ",p),console.log("max: ",u),this.particleSystem=(0,d.createParticles)(2e4,6509908,.05,u,p),this.scene.add(this.particleSystem.mesh),this.render=this.render.bind(this)}render(e,t){this.renderer.setAnimationLoop((()=>{const t=-5e-4*e;this.train.rotation.y+=t,this.train.tick(h.getDelta()),this.particleSystem.animate(t),this.renderer.render(this.scene,this.camera)}))}}},"./src/js/components/Train/Train.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{Train:()=>i});var o=s("./node_modules/three/build/three.module.js"),r=(s("./src/js/components/Train/geometries.js"),s("./src/js/components/Train/materials.js"),s("./src/js/components/Train/meshes.js"));const n=o.MathUtils.degToRad(24);class i extends o.Group{constructor(){super(),this.meshes=(0,r.createMeshes)(),this.add(this.meshes.face,this.meshes.nose,this.meshes.cabin,this.meshes.chimney,this.meshes.smallWheelRear,this.meshes.smallWheelCenter,this.meshes.smallWheelFront,this.meshes.bigWheel),this.wheels=[this.meshes.smallWheelRear,this.meshes.smallWheelCenter,this.meshes.smallWheelFront,this.meshes.bigWheel]}tick(e){this.wheels.forEach((t=>{t.rotation.y+=n*e}))}}},"./src/js/components/Train/geometries.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{createGeometries:()=>r});var o=s("./node_modules/three/build/three.module.js");function r(){const e=new o.BoxBufferGeometry(2,2.25,1.5),t=new o.CylinderBufferGeometry(.75,.75,3,12),s=new o.CircleGeometry(.75,12);return{cabin:e,nose:t,wheel:new o.CylinderBufferGeometry(.4,.4,1.75,16),chimney:new o.CylinderBufferGeometry(.3,.1,.5),face:s}}},"./src/js/components/Train/materials.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{createMaterials:()=>r});var o=s("./node_modules/three/build/three.module.js");function r(){const e=new o.MeshPhongMaterial({color:"cyan",side:o.FrontSide}),t=new o.MeshLambertMaterial({color:"black",side:o.BackSide}),s=new o.MeshStandardMaterial({color:"lightGray",flatShading:!0}),r=(new o.TextureLoader).load("hank.png");r.repeat.set(.77,.77),r.offset.set(.12,.12);return{body:e,detail:s,outline:t,face:new o.MeshStandardMaterial({map:r,flatShading:!0})}}},"./src/js/components/Train/meshes.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{createMeshes:()=>a});var o=s("./node_modules/three/build/three.module.js"),r=s("./src/js/components/Train/geometries.js"),n=s("./src/js/components/Train/materials.js");function i(e,t){const s=(0,n.createMaterials)(),r=new o.Group,i=new o.Mesh(e,t),a=new o.Mesh(e,s.outline);return i.geometry.computeVertexNormals(),a.scale.set(1.03,1.03,1.03),a.geometry.computeVertexNormals(),r.add(a),r.add(i),r}function a(){const e=(0,n.createMaterials)(),t=(0,r.createGeometries)(),s=i(t.cabin,e.body);s.position.set(1.5,1.4,0);const o=i(t.chimney,e.detail);o.position.set(-2,1.9,0);const a=i(t.nose,e.body);a.position.set(-1,1,0),a.rotation.z=Math.PI/2;const c=i(t.face,e.face);c.position.set(-2.51,1,0),c.rotation.y=-Math.PI/2;const l=i(t.wheel,e.detail);l.position.y=.5,l.rotation.x=Math.PI/2;const d=l.clone();d.position.x=-1;const h=l.clone();h.position.x=-2;const m=l.clone();return m.position.set(1.5,.9,0),m.scale.set(2,1.25,2),{face:c,nose:a,cabin:s,chimney:o,smallWheelRear:l,smallWheelCenter:d,smallWheelFront:h,bigWheel:m}}},"./src/js/components/camera.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{createCamera:()=>r});var o=s("./node_modules/three/build/three.module.js");function r(){const e=new o.PerspectiveCamera(60,window.innerWidth/window.innerHeight,.1,300);return e.position.set(5,2,10),e}},"./src/js/components/controls.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{createControls:()=>i});var o=s("./node_modules/three/examples/jsm/controls/OrbitControls.js"),r=s("../node_modules/three/examples/jsm/libs/lil-gui.module.min.js"),n=s("./src/js/utils/ColorGUIHelper.js");function i(e,t,s){const i=new o.OrbitControls(e,t.domElement);i.target.set(0,5,0),i.update();const a=new r.GUI;a.addColor(new n.default(s,"color"),"value").name("color"),a.add(s,"intensity",0,2,.01)}},"./src/js/components/fog.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{createFog:()=>r});var o=s("./node_modules/three/build/three.module.js");function r(e,t,s){return new o.Fog(e,t,s)}},"./src/js/components/lights.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{createLights:()=>r});var o=s("./node_modules/three/build/three.module.js");function r(e,t){const s=new o.DirectionalLight(e,t);return s.position.set(-10,10,10),s}},"./src/js/components/particleSystem.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{createParticles:()=>n});var o=s("./node_modules/three/build/three.module.js");const r=(e,t)=>e+Math.random()*(t-e);function n(e,t,s,n,i){const a=[],c=[],l=new o.BufferGeometry;for(let t=0;t<e;t++){const e={position:new o.Vector3(r(i.x,n.x),r(i.y,n.y),r(i.z,-n.z)),velocity:new o.Vector3(r(.001,.03),.06,r(.001,.03)),acceleration:new o.Vector3(1e-4,1e-4,1e-4)};a.push(e);const t=Object.values(e.position);c.push(...t)}console.log("vertices: ",c),l.setAttribute("position",new o.BufferAttribute(new Float32Array(c),3));const d=new o.PointsMaterial({color:t,size:s}),h=new o.Points(l,d);return{mesh:h,animate:function(e){const t=[];a.forEach((e=>{e.position.add(e.velocity),e.position.y>10&&(e.position=new o.Vector3(r(i.x,n.x),r(i.y,n.y),r(i.z,-n.z)));const s=Object.values(e.position);t.push(...s)})),l.setAttribute("position",new o.BufferAttribute(new Float32Array(t),3)),l.attributes.position.needsUpdate=!0,h.rotation.y+=e}}}},"./src/js/components/renderer.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{createRenderer:()=>r});var o=s("./node_modules/three/build/three.module.js");function r(){const e=new o.WebGLRenderer({antialising:!0});return e.setSize(window.innerWidth,window.innerHeight),e.physicallyCorrectLights=!0,e.setPixelRatio(2),e.shadowMapEnabled=!0,document.body.append(e.domElement),e}},"./src/js/data/config.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});const o={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:s("./node_modules/@tweenjs/tween.js/dist/tween.esm.js").default.Easing.Quadratic.InOut,duration:500,model:{selected:0,initialTypes:["gltf","object"],type:"gltf"},models:[{path:"./assets/models/duck.gltf",scale:20,type:"gltf"},{path:"./assets/models/Teapot.json",scale:20,type:"object"}],texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!0,wireframe:!1,translucent:!1,material:{color:16777215,emissive:16777215}},fog:{color:16777215,near:8e-4},camera:{fov:40,near:2,far:1e3,aspect:1,posX:0,posY:30,posZ:40},controls:{autoRotate:!0,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:200,maxDistance:600,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/2,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}}},"./src/js/utils/ColorGUIHelper.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});class o{constructor(e,t){this.object=e,this.prop=t}get value(){return`#${this.object[this.prop].getHexString()}`}set value(e){this.object[this.prop].set(e)}}},"./src/js/utils/detector.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});const o={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,s,o;t=void 0!==(e=e||{}).parent?e.parent:document.body,s=void 0!==e.id?e.id:"oldie",(o=this.getWebGLErrorMessage()).id=s,t.appendChild(o)}}},"./src/css/app.scss":(e,t,s)=>{"use strict";s.r(t)}},e=>{"use strict";e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
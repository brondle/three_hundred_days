/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/app.js":(e,t,s)=>{"use strict";s.r(t);var i=s("./src/js/data/config.js"),o=s("./src/js/utils/detector.js"),n=s("./src/js/app/main.js");s("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),i.default.isDev=!0,function(){if(o.default.webgl){document.getElementById("appContainer");(new n.default).render()}else o.default.addGetWebGLMessage()}()},"./src/js/app/main.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});var i=s("./node_modules/three/build/three.module.js"),o=s("./node_modules/three/examples/jsm/controls/OrbitControls.js");s("./node_modules/randomcolor/randomColor.js");new i.Color,new i.Color;class n{constructor(){this.mySwitch=!0;this.camera=new i.PerspectiveCamera(45,window.innerWidth/window.innerHeight,.1,100),this.camera.position.set(0,0,50),this.scene=new i.Scene,this.renderer=new i.WebGLRenderer,this.renderer.shadowMapEnabled=!0,document.body.appendChild(this.renderer.domElement);const e=new o.OrbitControls(this.camera,this.renderer.domElement);e.target.set(0,5,0),e.update(),this.makeOval=this.makeOval.bind(this),this.blink1=this.blink1.bind(this),this.blink2=this.blink2.bind(this);let t=this.makeOval(22,"#0xffff00");t.rotation.z=Math.PI/2;const s=new i.SphereGeometry(1.5,25,17),n=new i.MeshBasicMaterial({color:new i.Color("#0d0a0a")}),a=new i.Mesh(s,n);a.position.z=3.5,a.position.x=-4,this.scene.add(a),this.lids=[],console.log("eye rotation",t.rotation),this.scene.add(t),this.xRad=7.7,this.yRad=2.6,console.log("camera position: ",this.camera.position),console.log("shape position: ",t.position),this.camera.lookAt(t.position),this.render=this.render.bind(this);for(let e=0;e<100;e++);}makeOval(e,t){const s=[];for(let t=0;t<e;++t)s.push(new i.Vector2(3*Math.sin(.15*t),.8*(t-5)));console.log("points: ",s);const o=new i.LatheGeometry(s),n=new i.MeshBasicMaterial({color:new i.Color(t)});return new i.Mesh(o,n)}blink1(e,t){if(this.xRad>0&&this.yRad>0&&this.xRad<=7.7&&this.yRad<=2.6&&this.mySwitch){this.xRad-=t,this.yRad-=t;const s=new i.EllipseCurve(-4,0,this.xRad,this.yRad,0,2*Math.PI/2,!1,0).getPoints(50),o=(new i.BufferGeometry).setFromPoints(s),n=new i.LineBasicMaterial({color:new i.Color(e)}),a=new i.Line(o,n);a.position.z=5,this.scene.add(a),this.lids.push(a)}else 7.7==this.Xrad&&2.6==this.yRad?this.mySwitch=!0:1==this.mySwitch?this.mySwitch=!1:(this.scene.remove(this.lids[this.lids.length-1]),this.lids.pop(),this.xRad+=t,this.yRad+=t)}blink2(e,t){if(this.xRad>0&&this.yRad>0&&this.xRad<=7.7&&this.yRad<=2.6&&this.mySwitch){const t=new i.EllipseCurve(-4,0,0-this.xRad,0-this.yRad,0,2*Math.PI/2,!1,0).getPoints(50),s=(new i.BufferGeometry).setFromPoints(t),o=new i.LineBasicMaterial({color:new i.Color(e)}),n=new i.Line(s,o);n.position.z=5,this.scene.add(n),this.lids.push(n)}else 7.7==this.Xrad&&2.6==this.yRad?this.mySwitch=!0:1==this.mySwitch?(console.log("foo1"),this.mySwitch=!1):(console.log("foo2"),console.log(this.xRad),console.log(this.yRad),this.scene.remove(this.lids[this.lids.length-1]),this.lids.pop(),this.xRad+=t,this.yRad+=t)}render(e){this.blink1("#4b5699",.01),this.blink2("#4b5699",.01),this.renderer.render(this.scene,this.camera),requestAnimationFrame(this.render)}}},"./src/js/data/config.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});const i={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:s("./node_modules/@tweenjs/tween.js/dist/tween.esm.js").default.Easing.Quadratic.InOut,duration:500,model:{selected:0,initialTypes:["gltf","object"],type:"gltf"},models:[{path:"./assets/models/duck.gltf",scale:20,type:"gltf"},{path:"./assets/models/Teapot.json",scale:20,type:"object"}],texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!0,wireframe:!1,translucent:!1,material:{color:16777215,emissive:16777215}},fog:{color:16777215,near:8e-4},camera:{fov:40,near:2,far:1e3,aspect:1,posX:0,posY:30,posZ:40},controls:{autoRotate:!0,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:200,maxDistance:600,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/2,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}}},"./src/js/utils/detector.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});const i={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,s,i;t=void 0!==(e=e||{}).parent?e.parent:document.body,s=void 0!==e.id?e.id:"oldie",(i=this.getWebGLErrorMessage()).id=s,t.appendChild(i)}}},"./src/css/app.scss":(e,t,s)=>{"use strict";s.r(t)}},e=>{"use strict";e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,